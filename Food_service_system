from collections import deque
import time
import threading
def time_it(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print("Done in:", str((end - start) * 1000) + 'ms')
        return result

    return wrapper
class FoodService:
    def __init__(self):
        self.queue=deque()
    @time_it
    def Place_order(self,arr):
        for foods in arr:
            self.queue.appendleft(foods)
        print(self.queue)
        time.sleep(0.5)
    @time_it
    def Serve_order(self):
        while(len(self.queue)>0):
            print(self.queue.pop())
        if(len(self.queue)<=0):
            time.sleep(2)
if __name__=='__main__':
    q=FoodService()
    orders=['Pizza','Samosa','Pasta','Biryani','Kabaab']
    t1=threading.Thread(target=q.Place_order,args=(orders,))
    t2=threading.Thread(target=q.Serve_order)
    t1.start()
    t2.start()
